{
  "api/MGR.CommandLineParser.Command.CommandAttribute.html": {
    "href": "api/MGR.CommandLineParser.Command.CommandAttribute.html",
    "title": "Class CommandAttribute | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandAttribute Defines attributes for the command. Inheritance System.Object CommandAttribute Namespace : MGR.CommandLineParser.Command Assembly : MGR.CommandLineParser.dll Syntax public sealed class CommandAttribute : Attribute Properties | Improve this Doc View Source Description Gets or sets the description of the command. Declaration public string Description { get; set; } Property Value Type Description System.String Remarks If the property ResourceType is not null, this is the name of the resource used to determine the description. | Improve this Doc View Source HideFromHelpListing Determine if the command should be hidden from the help listing. Declaration public bool HideFromHelpListing { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ResourceType The type of the resource used to determine the values. Declaration public Type ResourceType { get; set; } Property Value Type Description Type | Improve this Doc View Source Samples Gets or sets the samples for the command. Declaration public string[] Samples { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Usage Gets or sets the usage of the command. Declaration public string Usage { get; set; } Property Value Type Description System.String Remarks If the property ResourceType is not null, this is the name of the resource used to determine the usage."
  },
  "api/MGR.CommandLineParser.Command.CommandBase.html": {
    "href": "api/MGR.CommandLineParser.Command.CommandBase.html",
    "title": "Class CommandBase | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandBase Defines an base abstraction for the commands. It adds the implementation of the Arguments property, and a Help option. Inheritance System.Object CommandBase HelpCommand Implements ICommand Namespace : MGR.CommandLineParser.Command Assembly : MGR.CommandLineParser.dll Syntax public abstract class CommandBase : object, ICommand Constructors | Improve this Doc View Source CommandBase(IServiceProvider) Initializes a new instance of a CommandBase . Declaration protected CommandBase(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider Properties | Improve this Doc View Source Arguments The list of arguments of the command. Declaration public IList<string> Arguments { get; } Property Value Type Description IList < System.String > | Improve this Doc View Source CommandType Gets the CommandType of the command. Declaration protected ICommandType CommandType { get; } Property Value Type Description ICommandType | Improve this Doc View Source Console Gets the console used by the parser (if the command needs to writes something). Declaration protected IConsole Console { get; } Property Value Type Description IConsole | Improve this Doc View Source Help Gets or sets the indicator for showing the help of the command. Declaration public bool Help { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ServiceProvider Gets the of the parsing operation. Declaration protected IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider Methods | Improve this Doc View Source Configure(ICommandType) Configure the command with the ICommandType representing the command. Declaration public virtual void Configure(ICommandType commandType) Parameters Type Name Description ICommandType commandType The CommandType of the command. | Improve this Doc View Source ExecuteAsync() Executes the command. Declaration public virtual Task<int> ExecuteAsync() Returns Type Description Task < System.Int32 > Return 0 is everything was right, an negative error code otherwise. | Improve this Doc View Source ExecuteCommandAsync() Executes the command. Declaration protected abstract Task<int> ExecuteCommandAsync() Returns Type Description Task < System.Int32 > Return 0 is everything was right, an negative error code otherwise. Implements ICommand"
  },
  "api/MGR.CommandLineParser.Command.ConverterAttribute.html": {
    "href": "api/MGR.CommandLineParser.Command.ConverterAttribute.html",
    "title": "Class ConverterAttribute | MGR.CommandLineParser documentation site",
    "keywords": "Class ConverterAttribute Defines the converter type for a dictionary property. Inheritance System.Object ConverterAttribute Namespace : MGR.CommandLineParser.Command Assembly : MGR.CommandLineParser.dll Syntax public sealed class ConverterAttribute : Attribute Constructors | Improve this Doc View Source ConverterAttribute(Type) Initializes a new instance of a ConverterAttribute with the converter type. Declaration public ConverterAttribute(Type converterType) Parameters Type Name Description Type converterType Properties | Improve this Doc View Source ConverterType Gets the type of the converter. Declaration public Type ConverterType { get; } Property Value Type Description Type"
  },
  "api/MGR.CommandLineParser.Command.ConverterKeyValueAttribute.html": {
    "href": "api/MGR.CommandLineParser.Command.ConverterKeyValueAttribute.html",
    "title": "Class ConverterKeyValueAttribute | MGR.CommandLineParser documentation site",
    "keywords": "Class ConverterKeyValueAttribute Defines the key and the value converter types for a dictionary property. Inheritance System.Object ConverterKeyValueAttribute Namespace : MGR.CommandLineParser.Command Assembly : MGR.CommandLineParser.dll Syntax public sealed class ConverterKeyValueAttribute : Attribute Constructors | Improve this Doc View Source ConverterKeyValueAttribute(Type) Initializes a new instance of a ConverterKeyValueAttribute with the value converter type. Declaration public ConverterKeyValueAttribute(Type valueConverterType) Parameters Type Name Description Type valueConverterType The type of the value converter. Remarks The key's converter is supposed to be the StringConverter . | Improve this Doc View Source ConverterKeyValueAttribute(Type, Type) Initializes a new instance of a ConverterKeyValueAttribute with the value and the key converter types. Declaration public ConverterKeyValueAttribute(Type valueConverterType, Type keyConverterType) Parameters Type Name Description Type valueConverterType The type of the value converter. Type keyConverterType The type of the key converter. Properties | Improve this Doc View Source KeyConverterType Gets the type of the key converter. Declaration public Type KeyConverterType { get; } Property Value Type Description Type | Improve this Doc View Source ValueConverterType Gets the type of the value converter. Declaration public Type ValueConverterType { get; } Property Value Type Description Type"
  },
  "api/MGR.CommandLineParser.Command.HelpCommand.html": {
    "href": "api/MGR.CommandLineParser.Command.HelpCommand.html",
    "title": "Class HelpCommand | MGR.CommandLineParser documentation site",
    "keywords": "Class HelpCommand Defines the default implementation of the HelpCommand . Inheritance System.Object CommandBase HelpCommand Implements ICommand Inherited Members CommandBase.Console CommandBase.ServiceProvider CommandBase.CommandType CommandBase.Help CommandBase.Arguments CommandBase.ExecuteAsync() CommandBase.Configure(ICommandType) Namespace : MGR.CommandLineParser.Command Assembly : MGR.CommandLineParser.dll Syntax public sealed class HelpCommand : CommandBase, ICommand Constructors | Improve this Doc View Source HelpCommand(IServiceProvider) Creates a new instance of HelpCommand . Declaration public HelpCommand(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider A used to resolve services. Fields | Improve this Doc View Source Name Name of the help command. Declaration public const string Name = null Field Value Type Description System.String Properties | Improve this Doc View Source All Show detailed help for all commands. Declaration public bool All { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ExecuteCommandAsync() Executes the command. Declaration protected override Task<int> ExecuteCommandAsync() Returns Type Description Task < System.Int32 > Return 0 is everything was right, an negative error code otherwise. Overrides CommandBase.ExecuteCommandAsync() Implements ICommand"
  },
  "api/MGR.CommandLineParser.Command.html": {
    "href": "api/MGR.CommandLineParser.Command.html",
    "title": "Namespace MGR.CommandLineParser.Command | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Command Classes CommandAttribute Defines attributes for the command. CommandBase Defines an base abstraction for the commands. It adds the implementation of the Arguments property, and a Help option. ConverterAttribute Defines the converter type for a dictionary property. ConverterKeyValueAttribute Defines the key and the value converter types for a dictionary property. HelpCommand Defines the default implementation of the HelpCommand . IgnoreOptionPropertyAttribute Ignore the property as option. Interfaces ICommand Defines a command."
  },
  "api/MGR.CommandLineParser.Command.ICommand.html": {
    "href": "api/MGR.CommandLineParser.Command.ICommand.html",
    "title": "Interface ICommand | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommand Defines a command. Namespace : MGR.CommandLineParser.Command Assembly : MGR.CommandLineParser.dll Syntax public interface ICommand Properties | Improve this Doc View Source Arguments The list of arguments of the command. Declaration IList<string> Arguments { get; } Property Value Type Description IList < System.String > Methods | Improve this Doc View Source ExecuteAsync() Executes the command. Declaration Task<int> ExecuteAsync() Returns Type Description Task < System.Int32 > Return 0 is everything was right, an negative error code otherwise."
  },
  "api/MGR.CommandLineParser.Command.IgnoreOptionPropertyAttribute.html": {
    "href": "api/MGR.CommandLineParser.Command.IgnoreOptionPropertyAttribute.html",
    "title": "Class IgnoreOptionPropertyAttribute | MGR.CommandLineParser documentation site",
    "keywords": "Class IgnoreOptionPropertyAttribute Ignore the property as option. Inheritance System.Object IgnoreOptionPropertyAttribute Namespace : MGR.CommandLineParser.Command Assembly : MGR.CommandLineParser.dll Syntax public sealed class IgnoreOptionPropertyAttribute : Attribute"
  },
  "api/MGR.CommandLineParser.Command.Lambda.CommandBuilder.html": {
    "href": "api/MGR.CommandLineParser.Command.Lambda.CommandBuilder.html",
    "title": "Class CommandBuilder | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandBuilder Represents the object used to build a lambda-based command. Inheritance System.Object CommandBuilder Namespace : MGR.CommandLineParser.Command.Lambda Assembly : MGR.CommandLineParser.Command.Lambda.dll Syntax public class CommandBuilder : object Methods | Improve this Doc View Source AddOption<T>(String, String, Action<OptionBuilder>) Add an option to the command. Declaration public CommandBuilder AddOption<T>(string optionName, string shortOptionName, Action<OptionBuilder> defineOption) Parameters Type Name Description System.String optionName The name of the option. System.String shortOptionName The short name of the options. Action < OptionBuilder > defineOption An action to define command Returns Type Description CommandBuilder The CommandBuilder to chain calls. Type Parameters Name Description T The type of the option. | Improve this Doc View Source AddSample(String) Add a sample to demonstrate the command usage. Declaration public CommandBuilder AddSample(string sample) Parameters Type Name Description System.String sample A sample. Returns Type Description CommandBuilder The CommandBuilder to chain calls. | Improve this Doc View Source HideFromHelpListing() Hide the command from the help listing. Declaration public CommandBuilder HideFromHelpListing() Returns Type Description CommandBuilder The CommandBuilder to chain calls. Remarks This cannot be undone. | Improve this Doc View Source WithDescription(String) Defines the description of the command. Declaration public CommandBuilder WithDescription(string description) Parameters Type Name Description System.String description The description of the command. Returns Type Description CommandBuilder The CommandBuilder to chain calls. | Improve this Doc View Source WithUsage(String) Defines the usage of the command. Declaration public CommandBuilder WithUsage(string usage) Parameters Type Name Description System.String usage The usage of the command. Returns Type Description CommandBuilder The CommandBuilder to chain calls."
  },
  "api/MGR.CommandLineParser.Command.Lambda.CommandExecutionContext.html": {
    "href": "api/MGR.CommandLineParser.Command.Lambda.CommandExecutionContext.html",
    "title": "Class CommandExecutionContext | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandExecutionContext Represents the context of execution of a lambda-based command. Inheritance System.Object CommandExecutionContext Namespace : MGR.CommandLineParser.Command.Lambda Assembly : MGR.CommandLineParser.Command.Lambda.dll Syntax public class CommandExecutionContext : object Properties | Improve this Doc View Source Arguments Gets the arguments of the command. Declaration public IEnumerable<string> Arguments { get; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source ServiceProvider Gets the current . Declaration public IServiceProvider ServiceProvider { get; } Property Value Type Description IServiceProvider Methods | Improve this Doc View Source GetOptionValue<T>(String) Gets the value of an option. Declaration public T GetOptionValue<T>(string name) Parameters Type Name Description System.String name The name of the option. Returns Type Description T The value of the option. Type Parameters Name Description T The type of the option."
  },
  "api/MGR.CommandLineParser.Command.Lambda.html": {
    "href": "api/MGR.CommandLineParser.Command.Lambda.html",
    "title": "Namespace MGR.CommandLineParser.Command.Lambda | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Command.Lambda Classes CommandBuilder Represents the object used to build a lambda-based command. CommandExecutionContext Represents the context of execution of a lambda-based command. OptionBuilder Represents the object used to build an option of a lambda-based command. OptionBuilderExtensions Extension methods for the OptionBuilder ."
  },
  "api/MGR.CommandLineParser.Command.Lambda.OptionBuilder.html": {
    "href": "api/MGR.CommandLineParser.Command.Lambda.OptionBuilder.html",
    "title": "Class OptionBuilder | MGR.CommandLineParser documentation site",
    "keywords": "Class OptionBuilder Represents the object used to build an option of a lambda-based command. Inheritance System.Object OptionBuilder Namespace : MGR.CommandLineParser.Command.Lambda Assembly : MGR.CommandLineParser.Command.Lambda.dll Syntax public class OptionBuilder : object Methods | Improve this Doc View Source AddAlternateName(String) Add an alternate name for the option. Declaration public OptionBuilder AddAlternateName(string alternateName) Parameters Type Name Description System.String alternateName The alternate name. Returns Type Description OptionBuilder The OptionBuilder to chain calls. | Improve this Doc View Source AddValidation(ValidationAttribute) Add a validation to the option. Declaration public OptionBuilder AddValidation(ValidationAttribute validationAttribute) Parameters Type Name Description ValidationAttribute validationAttribute A validation. Returns Type Description OptionBuilder The OptionBuilder to chain calls. | Improve this Doc View Source WithDefaultValue(String) Defines the default value of the option. Declaration public OptionBuilder WithDefaultValue(string defaultValue) Parameters Type Name Description System.String defaultValue The default value of the option. Returns Type Description OptionBuilder The OptionBuilder to chain calls. | Improve this Doc View Source WithDescription(String) Defines the description of the option. Declaration public OptionBuilder WithDescription(string description) Parameters Type Name Description System.String description The description of the option. Returns Type Description OptionBuilder The OptionBuilder to chain calls. Extension Methods OptionBuilderExtensions.AddValidation<TValidation>(OptionBuilder) OptionBuilderExtensions.Required(OptionBuilder)"
  },
  "api/MGR.CommandLineParser.Command.Lambda.OptionBuilderExtensions.html": {
    "href": "api/MGR.CommandLineParser.Command.Lambda.OptionBuilderExtensions.html",
    "title": "Class OptionBuilderExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class OptionBuilderExtensions Extension methods for the OptionBuilder . Inheritance System.Object OptionBuilderExtensions Namespace : MGR.CommandLineParser.Command.Lambda Assembly : MGR.CommandLineParser.Command.Lambda.dll Syntax public static class OptionBuilderExtensions : object Methods | Improve this Doc View Source AddValidation<TValidation>(OptionBuilder) Add a validation to the option. Declaration public static OptionBuilder AddValidation<TValidation>(this OptionBuilder optionBuilder) where TValidation : ValidationAttribute, new() Parameters Type Name Description OptionBuilder optionBuilder The OptionBuilder . Returns Type Description OptionBuilder The OptionBuilder to chain calls. Type Parameters Name Description TValidation The type of the validation attribute. | Improve this Doc View Source Required(OptionBuilder) Add the required validation to the option. Declaration public static OptionBuilder Required(this OptionBuilder optionBuilder) Parameters Type Name Description OptionBuilder optionBuilder The OptionBuilder . Returns Type Description OptionBuilder The OptionBuilder to chain calls."
  },
  "api/MGR.CommandLineParser.CommandLineParserException.html": {
    "href": "api/MGR.CommandLineParser.CommandLineParserException.html",
    "title": "Class CommandLineParserException | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandLineParserException Exception thrown by the parser if a technical errors occurs. Inheritance System.Object CommandLineParserException Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public class CommandLineParserException : Exception Constructors | Improve this Doc View Source CommandLineParserException() Initializes a new instance of the CommandLineParserException class. Declaration public CommandLineParserException() | Improve this Doc View Source CommandLineParserException(SerializationInfo, StreamingContext) Initializes a new instance of the CommandLineParserException class with serialized data. Declaration protected CommandLineParserException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The that holds the serialized object data about the exception being thrown. StreamingContext context The that contains contextual information about the source or destination. | Improve this Doc View Source CommandLineParserException(String) Initializes a new instance of the CommandLineParserException class with a specified error message. Declaration public CommandLineParserException(string message) Parameters Type Name Description System.String message The error message that explains the reason for the exception. | Improve this Doc View Source CommandLineParserException(String, Exception) Initializes a new instance of the CommandLineParserException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public CommandLineParserException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. Exception innerException The that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/MGR.CommandLineParser.CommandParsingResultCode.html": {
    "href": "api/MGR.CommandLineParser.CommandParsingResultCode.html",
    "title": "Enum CommandParsingResultCode | MGR.CommandLineParser documentation site",
    "keywords": "Enum CommandParsingResultCode Built-in list of result code. Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public enum CommandParsingResultCode : int Fields Name Description CommandParametersNotValid The specified parameter for the options of the command are not valid. NoArgumentsProvided The args parameter of the Parse command is null. NoCommandFound The requested command was not found. NoCommandNameProvided There is no command name in the command-line. Success The parsing and the option's validation was fine."
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.AssemblyProviderBase.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.AssemblyProviderBase.html",
    "title": "Class AssemblyProviderBase | MGR.CommandLineParser documentation site",
    "keywords": "Class AssemblyProviderBase Base class for providing all files (*.dll and *.exe) in the current folder (recursive or not). Inheritance System.Object AssemblyProviderBase CurrentDirectoryAssemblyProvider RecursiveAssemblyProvider Implements IAssemblyProvider Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public abstract class AssemblyProviderBase : object, IAssemblyProvider Properties | Improve this Doc View Source SearchOption Gets the recursively options for browsing the current folder. Declaration protected abstract SearchOption SearchOption { get; } Property Value Type Description SearchOption Methods | Improve this Doc View Source GetAssembliesToBrowse() Returns the list of the files to load. Declaration public IEnumerable<Assembly> GetAssembliesToBrowse() Returns Type Description IEnumerable < Assembly > A list of path. Implements IAssemblyProvider"
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.ClassBasedBasicCommandActivator.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.ClassBasedBasicCommandActivator.html",
    "title": "Class ClassBasedBasicCommandActivator | MGR.CommandLineParser documentation site",
    "keywords": "Class ClassBasedBasicCommandActivator Basic command activator that uses Activator.CreateInstance to instantiate commands. Inheritance System.Object ClassBasedBasicCommandActivator Implements IClassBasedCommandActivator Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public sealed class ClassBasedBasicCommandActivator : object, IClassBasedCommandActivator Fields | Improve this Doc View Source Instance Gets the singleton instance of ClassBasedBasicCommandActivator . Declaration public static readonly IClassBasedCommandActivator Instance Field Value Type Description IClassBasedCommandActivator Methods | Improve this Doc View Source ActivateCommand(Type) Activates (create an instance) of a ICommand . Declaration public ICommand ActivateCommand(Type commandType) Parameters Type Name Description Type commandType The type of the command. Returns Type Description ICommand The command. Implements IClassBasedCommandActivator"
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.ClassBasedDependencyResolverCommandActivator.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.ClassBasedDependencyResolverCommandActivator.html",
    "title": "Class ClassBasedDependencyResolverCommandActivator | MGR.CommandLineParser documentation site",
    "keywords": "Class ClassBasedDependencyResolverCommandActivator Implementation of IClassBasedCommandActivator based on . Inheritance System.Object ClassBasedDependencyResolverCommandActivator Implements IClassBasedCommandActivator Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public sealed class ClassBasedDependencyResolverCommandActivator : object, IClassBasedCommandActivator Constructors | Improve this Doc View Source ClassBasedDependencyResolverCommandActivator(IServiceProvider) Creates a new instance of ClassBasedDependencyResolverCommandActivator . Declaration public ClassBasedDependencyResolverCommandActivator(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider Methods | Improve this Doc View Source ActivateCommand(Type) Activates (create an instance) of a ICommand . Declaration public ICommand ActivateCommand(Type commandType) Parameters Type Name Description Type commandType The type of the command. Returns Type Description ICommand The command. Implements IClassBasedCommandActivator"
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.CurrentDirectoryAssemblyProvider.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.CurrentDirectoryAssemblyProvider.html",
    "title": "Class CurrentDirectoryAssemblyProvider | MGR.CommandLineParser documentation site",
    "keywords": "Class CurrentDirectoryAssemblyProvider Implementation of IAssemblyProvider for providing all files (*.dll and *.exe) in the current folder NOT recursively (this is the current default implementation). Inheritance System.Object AssemblyProviderBase CurrentDirectoryAssemblyProvider Implements IAssemblyProvider Inherited Members AssemblyProviderBase.GetAssembliesToBrowse() Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public sealed class CurrentDirectoryAssemblyProvider : AssemblyProviderBase, IAssemblyProvider Fields | Improve this Doc View Source Instance Gets the singleton instance of CurrentDirectoryAssemblyProvider . Declaration public static readonly IAssemblyProvider Instance Field Value Type Description IAssemblyProvider Properties | Improve this Doc View Source SearchOption Create a new CurrentDirectoryAssemblyProvider . Declaration protected override SearchOption SearchOption { get; } Property Value Type Description SearchOption Overrides AssemblyProviderBase.SearchOption Implements IAssemblyProvider"
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.html",
    "title": "Namespace MGR.CommandLineParser.Extensibility.ClassBased | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Extensibility.ClassBased Classes AssemblyProviderBase Base class for providing all files (*.dll and *.exe) in the current folder (recursive or not). ClassBasedBasicCommandActivator Basic command activator that uses Activator.CreateInstance to instantiate commands. ClassBasedDependencyResolverCommandActivator Implementation of IClassBasedCommandActivator based on . CurrentDirectoryAssemblyProvider Implementation of IAssemblyProvider for providing all files (*.dll and *.exe) in the current folder NOT recursively (this is the current default implementation). RecursiveAssemblyProvider Implementation of IAssemblyProvider for providing all files (*.dll and *.exe) in the current folder recursively. Interfaces IAssemblyProvider Defines the contract for the provider of assemblies to load, used by MGR.CommandLineParser.Extensibility.ClassBased.AssemblyBrowsingClassBasedCommandTypeProvider . IClassBasedCommandActivator Defines the contract for the activator of ICommand . IClassBasedCommandObject Represents an interface that allow accessing to the raw ICommand instance. IPropertyOptionAlternateNameGenerator Defines the contract for the generation of alternate names."
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.IAssemblyProvider.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.IAssemblyProvider.html",
    "title": "Interface IAssemblyProvider | MGR.CommandLineParser documentation site",
    "keywords": "Interface IAssemblyProvider Defines the contract for the provider of assemblies to load, used by MGR.CommandLineParser.Extensibility.ClassBased.AssemblyBrowsingClassBasedCommandTypeProvider . Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public interface IAssemblyProvider Methods | Improve this Doc View Source GetAssembliesToBrowse() Returns the list of the files to load. Declaration IEnumerable<Assembly> GetAssembliesToBrowse() Returns Type Description IEnumerable < Assembly > A list of path."
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.IClassBasedCommandActivator.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.IClassBasedCommandActivator.html",
    "title": "Interface IClassBasedCommandActivator | MGR.CommandLineParser documentation site",
    "keywords": "Interface IClassBasedCommandActivator Defines the contract for the activator of ICommand . Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public interface IClassBasedCommandActivator Methods | Improve this Doc View Source ActivateCommand(Type) Activates (create an instance) of a ICommand . Declaration ICommand ActivateCommand(Type commandType) Parameters Type Name Description Type commandType The type of the command. Returns Type Description ICommand The command."
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.IClassBasedCommandObject.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.IClassBasedCommandObject.html",
    "title": "Interface IClassBasedCommandObject | MGR.CommandLineParser documentation site",
    "keywords": "Interface IClassBasedCommandObject Represents an interface that allow accessing to the raw ICommand instance. Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public interface IClassBasedCommandObject Properties | Improve this Doc View Source Command Gets the raw ICommand instance for the ICommandObject . Declaration ICommand Command { get; } Property Value Type Description ICommand"
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.IPropertyOptionAlternateNameGenerator.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.IPropertyOptionAlternateNameGenerator.html",
    "title": "Interface IPropertyOptionAlternateNameGenerator | MGR.CommandLineParser documentation site",
    "keywords": "Interface IPropertyOptionAlternateNameGenerator Defines the contract for the generation of alternate names. Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public interface IPropertyOptionAlternateNameGenerator Methods | Improve this Doc View Source GenerateAlternateNames(PropertyInfo) Gets the alternate names for an option. Declaration IEnumerable<string> GenerateAlternateNames(PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The for the option. Returns Type Description IEnumerable < System.String > The alternate names for the option."
  },
  "api/MGR.CommandLineParser.Extensibility.ClassBased.RecursiveAssemblyProvider.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ClassBased.RecursiveAssemblyProvider.html",
    "title": "Class RecursiveAssemblyProvider | MGR.CommandLineParser documentation site",
    "keywords": "Class RecursiveAssemblyProvider Implementation of IAssemblyProvider for providing all files (*.dll and *.exe) in the current folder recursively. Inheritance System.Object AssemblyProviderBase RecursiveAssemblyProvider Implements IAssemblyProvider Inherited Members AssemblyProviderBase.GetAssembliesToBrowse() Namespace : MGR.CommandLineParser.Extensibility.ClassBased Assembly : MGR.CommandLineParser.dll Syntax public sealed class RecursiveAssemblyProvider : AssemblyProviderBase, IAssemblyProvider Fields | Improve this Doc View Source Instance Gets the singleton instance of RecursiveAssemblyProvider . Declaration public static readonly IAssemblyProvider Instance Field Value Type Description IAssemblyProvider Properties | Improve this Doc View Source SearchOption Gets the recursively options for browsing the current folder. Declaration protected override SearchOption SearchOption { get; } Property Value Type Description SearchOption Overrides AssemblyProviderBase.SearchOption Implements IAssemblyProvider"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.CombinedCommandOption.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.CombinedCommandOption.html",
    "title": "Class CombinedCommandOption | MGR.CommandLineParser documentation site",
    "keywords": "Class CombinedCommandOption Represents an ICommandOption that combines a collection of ICommandOption . Inheritance System.Object CombinedCommandOption Implements ICommandOption Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public class CombinedCommandOption : object, ICommandOption Remarks This class can be used to combined options together (for example boolean options). Constructors | Improve this Doc View Source CombinedCommandOption(String, String, IEnumerable<ICommandOption>) Create an instance of CombinedCommandOption . Declaration public CombinedCommandOption(string optionName, string commandName, IEnumerable<ICommandOption> commandOptions) Parameters Type Name Description System.String optionName The name of the option used in the command line. System.String commandName The name of the command being parsed. IEnumerable < ICommandOption > commandOptions The ICommandOption that are combined together. Properties | Improve this Doc View Source Metadata Always throws an because the ICommandOptionMetadata cannot be combined. Declaration public ICommandOptionMetadata Metadata { get; } Property Value Type Description ICommandOptionMetadata | Improve this Doc View Source ShouldProvideValue Defines if a value should be provided when assigned to the command's option Declaration public bool ShouldProvideValue { get; } Property Value Type Description System.Boolean Remarks This is the case for the for example, where no value indicates a true value. Methods | Improve this Doc View Source AssignValue(String) Assigns a value to the command's option. Declaration public void AssignValue(string optionValue) Parameters Type Name Description System.String optionValue Implements ICommandOption"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.CommandObjectBuilderBase-1.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.CommandObjectBuilderBase-1.html",
    "title": "Class CommandObjectBuilderBase<TCommandOption> | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandObjectBuilderBase<TCommandOption> Represents a basic implementation for ICommandObjectBuilder that provide implementation for retrieving ICommandOption (potentially combined for boolean options) and validation (especially writing of validation errors). Inheritance System.Object CommandObjectBuilderBase<TCommandOption> Implements ICommandObjectBuilder Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public abstract class CommandObjectBuilderBase<TCommandOption> : object, ICommandObjectBuilder where TCommandOption : ICommandOption Type Parameters Name Description TCommandOption Constructors | Improve this Doc View Source CommandObjectBuilderBase(ICommandMetadata, IEnumerable<TCommandOption>) Initializes a new instance of CommandObjectBuilderBase<TCommandOption> . Declaration protected CommandObjectBuilderBase(ICommandMetadata commandMetadata, IEnumerable<TCommandOption> commandOptions) Parameters Type Name Description ICommandMetadata commandMetadata The command metadata. IEnumerable <TCommandOption> commandOptions The command's options. Properties | Improve this Doc View Source CommandMetadata Gets the metadata of the command being build. Declaration protected ICommandMetadata CommandMetadata { get; } Property Value Type Description ICommandMetadata | Improve this Doc View Source CommandOptions Gets the list of options of the command being build. Declaration protected IEnumerable<TCommandOption> CommandOptions { get; } Property Value Type Description IEnumerable <TCommandOption> Methods | Improve this Doc View Source AddArguments(String) Declaration public abstract void AddArguments(string argument) Parameters Type Name Description System.String argument | Improve this Doc View Source DoValidate(List<ValidationResult>, IServiceProvider) Perform the validation of the command. Declaration protected virtual bool DoValidate(List<ValidationResult> validationResults, IServiceProvider serviceProvider) Parameters Type Name Description List < ValidationResult > validationResults The list of validation errors to populate. IServiceProvider serviceProvider The current that can be used to gets services. Returns Type Description System.Boolean true if the command being build is valid, false elsewhere. | Improve this Doc View Source FindOption(String) Find an option based on its name. Declaration public virtual ICommandOption FindOption(string optionName) Parameters Type Name Description System.String optionName The name (short or long form) of the option. Returns Type Description ICommandOption The ICommandOption representing the option of the command. | Improve this Doc View Source FindOptionByShortName(String) Find an option based on its short name. Declaration public virtual ICommandOption FindOptionByShortName(string optionShortName) Parameters Type Name Description System.String optionShortName The short name of the option. Returns Type Description ICommandOption The ICommandOption representing the option of the command. | Improve this Doc View Source GenerateCommandObject() Generate the command object representing the command being parsed. Declaration public abstract ICommandObject GenerateCommandObject() Returns Type Description ICommandObject An object representing the parsed command. | Improve this Doc View Source Validate(IServiceProvider) Validates the command after having been parsed, and before being used. Declaration public virtual CommandValidationResult Validate(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider The current . Returns Type Description CommandValidationResult The result of the validation of the command. | Improve this Doc View Source WriteErrorsToConsole(IConsole, List<ValidationResult>) Write the validation errors to the current IConsole . Declaration protected void WriteErrorsToConsole(IConsole console, List<ValidationResult> results) Parameters Type Name Description IConsole console The IConsole to write to. List < ValidationResult > results the validation errors to write to the IConsole . Implements ICommandObjectBuilder"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.CommandOptionCollectionType.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.CommandOptionCollectionType.html",
    "title": "Enum CommandOptionCollectionType | MGR.CommandLineParser documentation site",
    "keywords": "Enum CommandOptionCollectionType The different types of collection that an command's option can be. Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public enum CommandOptionCollectionType : int Fields Name Description Collection A simple collection. Dictionary A dictionary. None Not a collection."
  },
  "api/MGR.CommandLineParser.Extensibility.Command.CommandOptionMetadataBase.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.CommandOptionMetadataBase.html",
    "title": "Class CommandOptionMetadataBase | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandOptionMetadataBase Represents a base container for ICommandOptionMetadata . Inheritance System.Object CommandOptionMetadataBase Implements ICommandOptionMetadata Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public abstract class CommandOptionMetadataBase : object, ICommandOptionMetadata Constructors | Improve this Doc View Source CommandOptionMetadataBase(Boolean, CommandOptionCollectionType, IOptionDisplayInfo, String) Creates a new instance of CommandOptionMetadataBase . Declaration protected CommandOptionMetadataBase(bool isRequired, CommandOptionCollectionType collectionType, IOptionDisplayInfo displayInfo, string defaultValue) Parameters Type Name Description System.Boolean isRequired Indicates if the option is required. CommandOptionCollectionType collectionType Indicates the type of collection of the option. IOptionDisplayInfo displayInfo The IOptionDisplayInfo of the option. System.String defaultValue The default value of the option. Properties | Improve this Doc View Source CollectionType Defines the type of collection of the option. Declaration public CommandOptionCollectionType CollectionType { get; } Property Value Type Description CommandOptionCollectionType | Improve this Doc View Source DefaultValue Gets the default value of the option, if explicitly defined. Declaration public string DefaultValue { get; } Property Value Type Description System.String | Improve this Doc View Source DisplayInfo Gets the display information of the option. Declaration public IOptionDisplayInfo DisplayInfo { get; } Property Value Type Description IOptionDisplayInfo | Improve this Doc View Source IsRequired Defines if an option is required or not. Declaration public bool IsRequired { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetMultiValueIndicator(Type) Compute the CommandOptionCollectionType based on the of the option. Declaration protected static CommandOptionCollectionType GetMultiValueIndicator(Type type) Parameters Type Name Description Type type The of the option. Returns Type Description CommandOptionCollectionType The CommandOptionCollectionType . Implements ICommandOptionMetadata"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.CommandValidationResult.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.CommandValidationResult.html",
    "title": "Class CommandValidationResult | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandValidationResult Represents the result of the validation of a command. Inheritance System.Object CommandValidationResult Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public class CommandValidationResult : object Constructors | Improve this Doc View Source CommandValidationResult(Boolean, IEnumerable<ValidationResult>) Creates a new instance of CommandValidationResult . Declaration public CommandValidationResult(bool isValid, IEnumerable<ValidationResult> validationErrors) Parameters Type Name Description System.Boolean isValid Specify if the validation pass or not. IEnumerable < ValidationResult > validationErrors The list of validation errors. Properties | Improve this Doc View Source IsValid Gets true if the validation pass, false elsewhere. Declaration public bool IsValid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ValidationErrors Gets the validation errors. Declaration public IEnumerable<ValidationResult> ValidationErrors { get; } Property Value Type Description IEnumerable < ValidationResult >"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.html",
    "title": "Namespace MGR.CommandLineParser.Extensibility.Command | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Extensibility.Command Classes CombinedCommandOption Represents an ICommandOption that combines a collection of ICommandOption . CommandObjectBuilderBase<TCommandOption> Represents a basic implementation for ICommandObjectBuilder that provide implementation for retrieving ICommandOption (potentially combined for boolean options) and validation (especially writing of validation errors). CommandOptionMetadataBase Represents a base container for ICommandOptionMetadata . CommandValidationResult Represents the result of the validation of a command. Interfaces ICommandMetadata Represents the metadata of a command. ICommandObjectBuilder Encapsulates a command ICommandOption Represents a command's option. ICommandOptionMetadata Represents the metadata of a command's option. ICommandType Represents a type of command. ICommandTypeProvider Define a command provider. IOptionDisplayInfo Represents the display information of an option. Enums CommandOptionCollectionType The different types of collection that an command's option can be."
  },
  "api/MGR.CommandLineParser.Extensibility.Command.ICommandMetadata.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.ICommandMetadata.html",
    "title": "Interface ICommandMetadata | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommandMetadata Represents the metadata of a command. Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public interface ICommandMetadata Properties | Improve this Doc View Source Description Gets the description of the command (if defined). Declaration string Description { get; } Property Value Type Description System.String | Improve this Doc View Source HideFromHelpListing Determine if the command should be hidden from the help listing. Declaration bool HideFromHelpListing { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the command. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Samples Gets the samples for the command. Declaration string[] Samples { get; } Property Value Type Description System.String [] | Improve this Doc View Source Usage Gets the usage of the command (if defined). Declaration string Usage { get; } Property Value Type Description System.String"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.ICommandObjectBuilder.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.ICommandObjectBuilder.html",
    "title": "Interface ICommandObjectBuilder | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommandObjectBuilder Encapsulates a command Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public interface ICommandObjectBuilder Methods | Improve this Doc View Source AddArguments(String) Declaration void AddArguments(string argument) Parameters Type Name Description System.String argument | Improve this Doc View Source FindOption(String) Find an option based on its name. Declaration ICommandOption FindOption(string optionName) Parameters Type Name Description System.String optionName The name (short or long form) of the option. Returns Type Description ICommandOption The ICommandOption representing the option of the command. | Improve this Doc View Source FindOptionByShortName(String) Find an option based on its short name. Declaration ICommandOption FindOptionByShortName(string optionShortName) Parameters Type Name Description System.String optionShortName The short name of the option. Returns Type Description ICommandOption The ICommandOption representing the option of the command. | Improve this Doc View Source GenerateCommandObject() Generate the command object representing the command being parsed. Declaration ICommandObject GenerateCommandObject() Returns Type Description ICommandObject An object representing the parsed command. | Improve this Doc View Source Validate(IServiceProvider) Validates the command after having been parsed, and before being used. Declaration CommandValidationResult Validate(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider The current . Returns Type Description CommandValidationResult The result of the validation of the command."
  },
  "api/MGR.CommandLineParser.Extensibility.Command.ICommandOption.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.ICommandOption.html",
    "title": "Interface ICommandOption | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommandOption Represents a command's option. Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public interface ICommandOption Properties | Improve this Doc View Source Metadata Gets the metadata of the option. Declaration ICommandOptionMetadata Metadata { get; } Property Value Type Description ICommandOptionMetadata | Improve this Doc View Source ShouldProvideValue Defines if a value should be provided when assigned to the command's option Declaration bool ShouldProvideValue { get; } Property Value Type Description System.Boolean Remarks This is the case for the for example, where no value indicates a true value. Methods | Improve this Doc View Source AssignValue(String) Assigns a value to the command's option. Declaration void AssignValue(string optionValue) Parameters Type Name Description System.String optionValue"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.ICommandOptionMetadata.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.ICommandOptionMetadata.html",
    "title": "Interface ICommandOptionMetadata | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommandOptionMetadata Represents the metadata of a command's option. Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public interface ICommandOptionMetadata Properties | Improve this Doc View Source CollectionType Defines the type of collection of the option. Declaration CommandOptionCollectionType CollectionType { get; } Property Value Type Description CommandOptionCollectionType | Improve this Doc View Source DefaultValue Gets the default value of the option, if explicitly defined. Declaration string DefaultValue { get; } Property Value Type Description System.String | Improve this Doc View Source DisplayInfo Gets the display information of the option. Declaration IOptionDisplayInfo DisplayInfo { get; } Property Value Type Description IOptionDisplayInfo | Improve this Doc View Source IsRequired Defines if an option is required or not. Declaration bool IsRequired { get; } Property Value Type Description System.Boolean"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.ICommandType.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.ICommandType.html",
    "title": "Interface ICommandType | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommandType Represents a type of command. Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public interface ICommandType Properties | Improve this Doc View Source Metadata Gets the metadata of the command. Declaration ICommandMetadata Metadata { get; } Property Value Type Description ICommandMetadata | Improve this Doc View Source Options Gets the option's metadata of the command type. Declaration IEnumerable<ICommandOptionMetadata> Options { get; } Property Value Type Description IEnumerable < ICommandOptionMetadata > Methods | Improve this Doc View Source CreateCommandObjectBuilder(IServiceProvider) Create the command from its type. Declaration ICommandObjectBuilder CreateCommandObjectBuilder(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider The scoped dependency resolver. Returns Type Description ICommandObjectBuilder"
  },
  "api/MGR.CommandLineParser.Extensibility.Command.ICommandTypeProvider.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.ICommandTypeProvider.html",
    "title": "Interface ICommandTypeProvider | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommandTypeProvider Define a command provider. Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public interface ICommandTypeProvider Remarks This is the starting point to implement another way to define commands. Methods | Improve this Doc View Source GetAllCommandTypes() Returns all commands types. Declaration Task<IEnumerable<ICommandType>> GetAllCommandTypes() Returns Type Description Task < IEnumerable < ICommandType >> | Improve this Doc View Source GetCommandType(String) Retrieve the MGR.CommandLineParser.Extensibility.ClassBased.ClassBasedCommandType of the command with the specified commandName . Declaration Task<ICommandType> GetCommandType(string commandName) Parameters Type Name Description System.String commandName The command name. Returns Type Description Task < ICommandType > The MGR.CommandLineParser.Extensibility.ClassBased.ClassBasedCommandType of the command with the specified commandName or null if the command's type is not found."
  },
  "api/MGR.CommandLineParser.Extensibility.Command.IOptionDisplayInfo.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Command.IOptionDisplayInfo.html",
    "title": "Interface IOptionDisplayInfo | MGR.CommandLineParser documentation site",
    "keywords": "Interface IOptionDisplayInfo Represents the display information of an option. Namespace : MGR.CommandLineParser.Extensibility.Command Assembly : MGR.CommandLineParser.dll Syntax public interface IOptionDisplayInfo Properties | Improve this Doc View Source AlternateNames Gets the alternates names of the option. Declaration IEnumerable<string> AlternateNames { get; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source Description Gets the description of the option. Declaration string Description { get; } Property Value Type Description System.String | Improve this Doc View Source Name Gets the name of the option. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ShortName Gets the short name of the option. Declaration string ShortName { get; } Property Value Type Description System.String"
  },
  "api/MGR.CommandLineParser.Extensibility.ConsoleExtensions.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.ConsoleExtensions.html",
    "title": "Class ConsoleExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class ConsoleExtensions Extensions methods for IConsole . Inheritance System.Object ConsoleExtensions Namespace : MGR.CommandLineParser.Extensibility Assembly : MGR.CommandLineParser.dll Syntax public static class ConsoleExtensions : object Methods | Improve this Doc View Source WriteLine(IConsole) Writes the current line terminator. Declaration public static void WriteLine(this IConsole console) Parameters Type Name Description IConsole console The current console. | Improve this Doc View Source WriteLine(IConsole, String) Writes the specified string value, followed by the current line terminator to the standard output stream . Declaration public static void WriteLine(this IConsole console, string value) Parameters Type Name Description IConsole console The current console. System.String value The value to write. | Improve this Doc View Source WriteLine(IConsole, String, Object[]) Writes the value representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information. Declaration public static void WriteLine(this IConsole console, string format, params object[] args) Parameters Type Name Description IConsole console The current console. System.String format A composite format string. System.Object [] args An array of objects to write using format . | Improve this Doc View Source WriteLineError(IConsole, String) Writes the specified string value, followed by the current line terminator to the error output stream . Declaration public static void WriteLineError(this IConsole console, string value) Parameters Type Name Description IConsole console The current console. System.String value The error message to write. | Improve this Doc View Source WriteLineWarning(IConsole, String) Writes the specified string value, followed by the current line terminator to the warning output stream . Declaration public static void WriteLineWarning(this IConsole console, string value) Parameters Type Name Description IConsole console The current console. System.String value The warning message to write."
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.BooleanConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.BooleanConverter.html",
    "title": "Class BooleanConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class BooleanConverter Converter for the type . Inheritance System.Object BooleanConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class BooleanConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Remarks The value can be '-', 'False' or 'false' to specify false, '+', 'True' or 'true' to specify true. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.ByteConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.ByteConverter.html",
    "title": "Class ByteConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class ByteConverter Converter for the type . Inheritance System.Object ByteConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class ByteConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.CharConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.CharConverter.html",
    "title": "Class CharConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class CharConverter Converter for the type . Inheritance System.Object CharConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class CharConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.ConverterExtensions.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.ConverterExtensions.html",
    "title": "Class ConverterExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class ConverterExtensions Extensions methods for the type IConverter . Inheritance System.Object ConverterExtensions Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public static class ConverterExtensions : object Methods | Improve this Doc View Source CanConvertTo(IConverter, Type) Indicates if the specified IConverter can convert to the specified . Declaration public static bool CanConvertTo(this IConverter source, Type targetType) Parameters Type Name Description IConverter source The converter. Type targetType The target . Returns Type Description System.Boolean true if the IConverter can convert, false otherwise."
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.DateTimeConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.DateTimeConverter.html",
    "title": "Class DateTimeConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class DateTimeConverter Converter for the type . Inheritance System.Object DateTimeConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class DateTimeConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.DecimalConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.DecimalConverter.html",
    "title": "Class DecimalConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class DecimalConverter Converter for the type . Inheritance System.Object DecimalConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class DecimalConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.DoubleConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.DoubleConverter.html",
    "title": "Class DoubleConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class DoubleConverter Converter for the type . Inheritance System.Object DoubleConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class DoubleConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.EnumConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.EnumConverter.html",
    "title": "Class EnumConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class EnumConverter Converter for the type . Inheritance System.Object EnumConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class EnumConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType The concrete enum type. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid or if concreteTargetType is not an enum. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.FileSystemInfoConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.FileSystemInfoConverter.html",
    "title": "Class FileSystemInfoConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class FileSystemInfoConverter Converter for the type . Inheritance System.Object FileSystemInfoConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class FileSystemInfoConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type for the converter ( ). Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Converts the value to an instnace of or . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The or . Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.GuidConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.GuidConverter.html",
    "title": "Class GuidConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class GuidConverter Converter for the type . Inheritance System.Object GuidConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class GuidConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.html",
    "title": "Namespace MGR.CommandLineParser.Extensibility.Converters | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Extensibility.Converters Classes BooleanConverter Converter for the type . ByteConverter Converter for the type . CharConverter Converter for the type . ConverterExtensions Extensions methods for the type IConverter . DateTimeConverter Converter for the type . DecimalConverter Converter for the type . DoubleConverter Converter for the type . EnumConverter Converter for the type . FileSystemInfoConverter Converter for the type . GuidConverter Converter for the type . Int16Converter Converter for the type . Int32Converter Converter for the type . Int64Converter Converter for the type . SingleConverter Converter for the type . StringConverter Converter for the type . TimeSpanConverter Converter for the type . UriConverter Converter for the type . Interfaces IConverter Define a converter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.IConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.IConverter.html",
    "title": "Interface IConverter | MGR.CommandLineParser documentation site",
    "keywords": "Interface IConverter Define a converter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public interface IConverter Properties | Improve this Doc View Source TargetType The target type of the converter. Declaration Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of concreteTargetType . Declaration object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType The concrete type expected by the option. Returns Type Description System.Object The converted value. Extension Methods ConverterExtensions.CanConvertTo(IConverter, Type)"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.Int16Converter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.Int16Converter.html",
    "title": "Class Int16Converter | MGR.CommandLineParser documentation site",
    "keywords": "Class Int16Converter Converter for the type . Inheritance System.Object Int16Converter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class Int16Converter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.Int32Converter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.Int32Converter.html",
    "title": "Class Int32Converter | MGR.CommandLineParser documentation site",
    "keywords": "Class Int32Converter Converter for the type . Inheritance System.Object Int32Converter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class Int32Converter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.Int64Converter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.Int64Converter.html",
    "title": "Class Int64Converter | MGR.CommandLineParser documentation site",
    "keywords": "Class Int64Converter Converter for the type . Inheritance System.Object Int64Converter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class Int64Converter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.SingleConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.SingleConverter.html",
    "title": "Class SingleConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class SingleConverter Converter for the type . Inheritance System.Object SingleConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class SingleConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.StringConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.StringConverter.html",
    "title": "Class StringConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class StringConverter Converter for the type . Inheritance System.Object StringConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class StringConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ). Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.TimeSpanConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.TimeSpanConverter.html",
    "title": "Class TimeSpanConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class TimeSpanConverter Converter for the type . Inheritance System.Object TimeSpanConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class TimeSpanConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ). Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Exceptions Type Condition CommandLineParserException Thrown if the value is not valid. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.Converters.UriConverter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.Converters.UriConverter.html",
    "title": "Class UriConverter | MGR.CommandLineParser documentation site",
    "keywords": "Class UriConverter Converter for the type . Inheritance System.Object UriConverter Implements IConverter Namespace : MGR.CommandLineParser.Extensibility.Converters Assembly : MGR.CommandLineParser.dll Syntax public sealed class UriConverter : object, IConverter Properties | Improve this Doc View Source TargetType The target type of the converter ( ).. Declaration public Type TargetType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Convert(String, Type) Convert the value to an instance of . Declaration public object Convert(string value, Type concreteTargetType) Parameters Type Name Description System.String value The original value provided by the user. Type concreteTargetType Not used. Returns Type Description System.Object The converted from the value. Implements IConverter"
  },
  "api/MGR.CommandLineParser.Extensibility.DefaultConsole.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.DefaultConsole.html",
    "title": "Class DefaultConsole | MGR.CommandLineParser documentation site",
    "keywords": "Class DefaultConsole Forward to . Inheritance System.Object DefaultConsole Implements IConsole Namespace : MGR.CommandLineParser.Extensibility Assembly : MGR.CommandLineParser.dll Syntax public sealed class DefaultConsole : object, IConsole Constructors | Improve this Doc View Source DefaultConsole() Create a new DefaultConsole . Declaration public DefaultConsole() Methods | Improve this Doc View Source Write(String, Object[]) Writes the value representation of the specified array of objects to the standard output stream using the specified format information. Declaration public void Write(string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An array of objects to write using format . | Improve this Doc View Source WriteError(String, Object[]) Writes the value representation of the specified array of objects, followed by the current line terminator, to the error output stream using the specified format information. Declaration public void WriteError(string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An array of objects to write using format . | Improve this Doc View Source WriteWarning(String, Object[]) Writes the value representation of the specified array of objects, followed by the current line terminator, to the warning output stream using the specified format information. Declaration public void WriteWarning(string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An array of objects to write using format . Implements IConsole"
  },
  "api/MGR.CommandLineParser.Extensibility.DefaultHelpWriter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.DefaultHelpWriter.html",
    "title": "Class DefaultHelpWriter | MGR.CommandLineParser documentation site",
    "keywords": "Class DefaultHelpWriter The default help writer. Writes to the IConsole . Inheritance System.Object DefaultHelpWriter Implements IHelpWriter Namespace : MGR.CommandLineParser.Extensibility Assembly : MGR.CommandLineParser.dll Syntax public sealed class DefaultHelpWriter : object, IHelpWriter Constructors | Improve this Doc View Source DefaultHelpWriter(IConsole, IEnumerable<ICommandTypeProvider>, IOptions<ParserOptions>) Create a new DefaultHelpWriter . Declaration public DefaultHelpWriter(IConsole console, IEnumerable<ICommandTypeProvider> commandTypeProviders, IOptions<ParserOptions> parserOptionsAccessor) Parameters Type Name Description IConsole console IEnumerable < ICommandTypeProvider > commandTypeProviders IOptions < ParserOptions > parserOptionsAccessor Methods | Improve this Doc View Source WriteCommandListing() Write command listing. Declaration public Task WriteCommandListing() Returns Type Description Task | Improve this Doc View Source WriteHelpForCommand(ICommandType[]) Write the help for some commands. Declaration public void WriteHelpForCommand(params ICommandType[] commandTypes) Parameters Type Name Description ICommandType [] commandTypes The ICommandType of the commands to display help. Implements IHelpWriter"
  },
  "api/MGR.CommandLineParser.Extensibility.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.html",
    "title": "Namespace MGR.CommandLineParser.Extensibility | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Extensibility Classes ConsoleExtensions Extensions methods for IConsole . DefaultConsole Forward to . DefaultHelpWriter The default help writer. Writes to the IConsole . Interfaces IConsole Defines the console to log the parser activity. IHelpWriter Display the help."
  },
  "api/MGR.CommandLineParser.Extensibility.IConsole.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.IConsole.html",
    "title": "Interface IConsole | MGR.CommandLineParser documentation site",
    "keywords": "Interface IConsole Defines the console to log the parser activity. Namespace : MGR.CommandLineParser.Extensibility Assembly : MGR.CommandLineParser.dll Syntax public interface IConsole Methods | Improve this Doc View Source Write(String, Object[]) Writes the value representation of the specified array of objects to the standard output stream using the specified format information. Declaration void Write(string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An array of objects to write using format . | Improve this Doc View Source WriteError(String, Object[]) Writes the value representation of the specified array of objects, followed by the current line terminator, to the error output stream using the specified format information. Declaration void WriteError(string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An array of objects to write using format . | Improve this Doc View Source WriteWarning(String, Object[]) Writes the value representation of the specified array of objects, followed by the current line terminator, to the warning output stream using the specified format information. Declaration void WriteWarning(string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An array of objects to write using format . Extension Methods ConsoleExtensions.WriteLine(IConsole) ConsoleExtensions.WriteLine(IConsole, String) ConsoleExtensions.WriteLine(IConsole, String, Object[]) ConsoleExtensions.WriteLineError(IConsole, String) ConsoleExtensions.WriteLineWarning(IConsole, String)"
  },
  "api/MGR.CommandLineParser.Extensibility.IHelpWriter.html": {
    "href": "api/MGR.CommandLineParser.Extensibility.IHelpWriter.html",
    "title": "Interface IHelpWriter | MGR.CommandLineParser documentation site",
    "keywords": "Interface IHelpWriter Display the help. Namespace : MGR.CommandLineParser.Extensibility Assembly : MGR.CommandLineParser.dll Syntax public interface IHelpWriter Methods | Improve this Doc View Source WriteCommandListing() Write command listing. Declaration Task WriteCommandListing() Returns Type Description Task | Improve this Doc View Source WriteHelpForCommand(ICommandType[]) Write the help for some commands. Declaration void WriteHelpForCommand(params ICommandType[] commandTypes) Parameters Type Name Description ICommandType [] commandTypes The ICommandType of the commands to display help."
  },
  "api/MGR.CommandLineParser.Hosting.Extensions.HostBuilderExtensions.html": {
    "href": "api/MGR.CommandLineParser.Hosting.Extensions.HostBuilderExtensions.html",
    "title": "Class HostBuilderExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class HostBuilderExtensions Extension's methods for . Inheritance System.Object HostBuilderExtensions Namespace : MGR.CommandLineParser.Hosting.Extensions Assembly : MGR.CommandLineParser.Hosting.dll Syntax public static class HostBuilderExtensions : object Methods | Improve this Doc View Source ConfigureParser(IHostBuilder, Action<CommandLineParserBuilder>) Configures the to run the parser. Declaration public static IHostBuilder ConfigureParser(this IHostBuilder hostBuilder, Action<CommandLineParserBuilder> configureParser) Parameters Type Name Description IHostBuilder hostBuilder The to configure. Action < CommandLineParserBuilder > configureParser An action to configure the IParser . Returns Type Description IHostBuilder The configured . | Improve this Doc View Source ConfigureParser(IHostBuilder, Action<CommandLineParserBuilder>, Action<ParserOptions>) Configures the to run the parser. Declaration public static IHostBuilder ConfigureParser(this IHostBuilder hostBuilder, Action<CommandLineParserBuilder> configureParser, Action<ParserOptions> configureParserOptions) Parameters Type Name Description IHostBuilder hostBuilder The to configure. Action < CommandLineParserBuilder > configureParser An action to configure the IParser . Action < ParserOptions > configureParserOptions An action to configure the ParserOptions of the parser. Returns Type Description IHostBuilder The configured . | Improve this Doc View Source ParseCommandLineAndExecuteAsync(IHostBuilder, String[], CancellationToken) Parse the command line and execute the command if it is valid. Declaration public static Task<int> ParseCommandLineAndExecuteAsync(this IHostBuilder hostBuilder, string[] args, CancellationToken cancellationToken = null) Parameters Type Name Description IHostBuilder hostBuilder The configured . System.String [] args The arguments to parse. CancellationToken cancellationToken The token to trigger shutdown. Returns Type Description Task < System.Int32 > A code that represents the result of the parsing and the execution of the command. | Improve this Doc View Source ParseCommandLineAndExecuteAsync<TCommand>(IHostBuilder, String[], CancellationToken) Parse the command line for a specific command and execute the command if it is valid. The name of the command should not be in the arguments list. Declaration public static Task<int> ParseCommandLineAndExecuteAsync<TCommand>(this IHostBuilder hostBuilder, string[] args, CancellationToken cancellationToken = null) where TCommand : class, ICommand Parameters Type Name Description IHostBuilder hostBuilder The configured . System.String [] args The arguments to parse. CancellationToken cancellationToken The token to trigger shutdown. Returns Type Description Task < System.Int32 > A code that represents the result of the parsing and the execution of the command. Type Parameters Name Description TCommand The type of the command. Remarks This method can only be used with class-based command. | Improve this Doc View Source ParseCommandLineWithDefaultCommandAndExecuteAsync<TCommand>(IHostBuilder, String[], CancellationToken) Parse the command line and execute the command if it is valid. If the name of the command is not the first argument, fallback to the specified command. Declaration public static Task<int> ParseCommandLineWithDefaultCommandAndExecuteAsync<TCommand>(this IHostBuilder hostBuilder, string[] args, CancellationToken cancellationToken = null) where TCommand : class, ICommand Parameters Type Name Description IHostBuilder hostBuilder The configured . System.String [] args The arguments to parse. CancellationToken cancellationToken The token to trigger shutdown. Returns Type Description Task < System.Int32 > A code that represents the result of the parsing and the execution of the command. Type Parameters Name Description TCommand The type of the default command. Remarks This method can only be used with class-based command."
  },
  "api/MGR.CommandLineParser.Hosting.Extensions.HostExtensions.html": {
    "href": "api/MGR.CommandLineParser.Hosting.Extensions.HostExtensions.html",
    "title": "Class HostExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class HostExtensions Extension's methods for . Inheritance System.Object HostExtensions Namespace : MGR.CommandLineParser.Hosting.Extensions Assembly : MGR.CommandLineParser.Hosting.dll Syntax public static class HostExtensions : object Methods | Improve this Doc View Source ParseCommandLineAndExecuteAsync(IHost, String[], CancellationToken) Parse the command line and execute the command if it is valid. Declaration public static Task<int> ParseCommandLineAndExecuteAsync(this IHost host, string[] args, CancellationToken cancellationToken = null) Parameters Type Name Description IHost host The configured . System.String [] args The arguments to parse. CancellationToken cancellationToken The token to trigger shutdown. Returns Type Description Task < System.Int32 > A code that represents the result of the parsing and the execution of the command. | Improve this Doc View Source ParseCommandLineAndExecuteAsync<TCommand>(IHost, String[], CancellationToken) Parse the command line for a specific command and execute the command if it is valid. The name of the command should not be in the arguments list. Declaration public static Task<int> ParseCommandLineAndExecuteAsync<TCommand>(this IHost host, string[] args, CancellationToken cancellationToken = null) where TCommand : class, ICommand Parameters Type Name Description IHost host The configured . System.String [] args The arguments to parse. CancellationToken cancellationToken The token to trigger shutdown. Returns Type Description Task < System.Int32 > A code that represents the result of the parsing and the execution of the command. Type Parameters Name Description TCommand The type of the command. Remarks This method can only be used with class-based command. | Improve this Doc View Source ParseCommandLineWithDefaultCommandAndExecuteAsync<TCommand>(IHost, String[], CancellationToken) Parse the command line and execute the command if it is valid. If the name of the command is not the first argument, fallback to the specified command. Declaration public static Task<int> ParseCommandLineWithDefaultCommandAndExecuteAsync<TCommand>(this IHost host, string[] args, CancellationToken cancellationToken = null) where TCommand : class, ICommand Parameters Type Name Description IHost host The configured . System.String [] args The arguments to parse. CancellationToken cancellationToken The token to trigger shutdown. Returns Type Description Task < System.Int32 > A code that represents the result of the parsing and the execution of the command. Type Parameters Name Description TCommand The type of the default command. Remarks This method can only be used with class-based command."
  },
  "api/MGR.CommandLineParser.Hosting.Extensions.html": {
    "href": "api/MGR.CommandLineParser.Hosting.Extensions.html",
    "title": "Namespace MGR.CommandLineParser.Hosting.Extensions | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Hosting.Extensions Classes HostBuilderExtensions Extension's methods for . HostExtensions Extension's methods for ."
  },
  "api/MGR.CommandLineParser.html": {
    "href": "api/MGR.CommandLineParser.html",
    "title": "Namespace MGR.CommandLineParser | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser Classes CommandLineParserException Exception thrown by the parser if a technical errors occurs. ParserBuilder Represents the constructor of a parser. ParserOptions Defines the options for the parser. ParserOptionsBuilder Represents a builder for the ParserOptions . ParsingResult Represents the result of the parsing operation. ServiceCollectionExtensions Extensions methods for the type . Interfaces ICommandObject Represents the instance of the command. IParser Represents a parser. IParserFactory A factory abstractions to create a IParser . Enums CommandParsingResultCode Built-in list of result code."
  },
  "api/MGR.CommandLineParser.ICommandObject.html": {
    "href": "api/MGR.CommandLineParser.ICommandObject.html",
    "title": "Interface ICommandObject | MGR.CommandLineParser documentation site",
    "keywords": "Interface ICommandObject Represents the instance of the command. Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public interface ICommandObject Methods | Improve this Doc View Source ExecuteAsync() Executes the command. Declaration Task<int> ExecuteAsync() Returns Type Description Task < System.Int32 > The result of the command execution."
  },
  "api/MGR.CommandLineParser.IParser.html": {
    "href": "api/MGR.CommandLineParser.IParser.html",
    "title": "Interface IParser | MGR.CommandLineParser documentation site",
    "keywords": "Interface IParser Represents a parser. Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public interface IParser Properties | Improve this Doc View Source CommandLineName Gets the name of the current tools. Declaration string CommandLineName { get; } Property Value Type Description System.String | Improve this Doc View Source Logo Gets the current logo (name + version) of the current tools. Declaration string Logo { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Parse(IEnumerable<String>) Parse the supplied arguments. Declaration Task<ParsingResult> Parse(IEnumerable<string> arguments) Parameters Type Name Description IEnumerable < System.String > arguments The arguments. Returns Type Description Task < ParsingResult > The result of the parsing of the arguments. | Improve this Doc View Source Parse<TCommand>(IEnumerable<String>) Parse the supplied arguments for a specific command. The name of the command should not be in the arguments list. Declaration Task<ParsingResult> Parse<TCommand>(IEnumerable<string> arguments) where TCommand : class, ICommand Parameters Type Name Description IEnumerable < System.String > arguments The arguments. Returns Type Description Task < ParsingResult > The result of the parsing of the arguments. Type Parameters Name Description TCommand The type of the command. Remarks This method can only be used with class-based command. | Improve this Doc View Source ParseWithDefaultCommand<TCommand>(IEnumerable<String>) Parse the supplied arguments. If the name of the command is not the first argument, fallback to the specified command. The default command can only be class-based. Declaration Task<ParsingResult> ParseWithDefaultCommand<TCommand>(IEnumerable<string> arguments) where TCommand : class, ICommand Parameters Type Name Description IEnumerable < System.String > arguments The arguments. Returns Type Description Task < ParsingResult > The result of the parsing of the arguments. Type Parameters Name Description TCommand The type of the default command."
  },
  "api/MGR.CommandLineParser.IParserFactory.html": {
    "href": "api/MGR.CommandLineParser.IParserFactory.html",
    "title": "Interface IParserFactory | MGR.CommandLineParser documentation site",
    "keywords": "Interface IParserFactory A factory abstractions to create a IParser . Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public interface IParserFactory Methods | Improve this Doc View Source CreateParser() Creates a new instance of IParser . Declaration IParser CreateParser() Returns Type Description IParser A new IParser ."
  },
  "api/MGR.CommandLineParser.ParserBuilder.html": {
    "href": "api/MGR.CommandLineParser.ParserBuilder.html",
    "title": "Class ParserBuilder | MGR.CommandLineParser documentation site",
    "keywords": "Class ParserBuilder Represents the constructor of a parser. Inheritance System.Object ParserBuilder Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public sealed class ParserBuilder : object Constructors | Improve this Doc View Source ParserBuilder(ParserOptions) Creates a new ParserBuilder . Declaration public ParserBuilder(ParserOptions parserOptions) Parameters Type Name Description ParserOptions parserOptions The options of the parser. | Improve this Doc View Source ParserBuilder(ParserOptions, IServiceCollection) Creates a new ParserBuilder . Declaration public ParserBuilder(ParserOptions parserOptions, IServiceCollection services) Parameters Type Name Description ParserOptions parserOptions The options of the parser. IServiceCollection services The services to uses. Methods | Improve this Doc View Source AddCommands(Action<CommandLineParserBuilder>) Add the commands to the ParserBuilder . Declaration public ParserBuilder AddCommands(Action<CommandLineParserBuilder> configureCommands) Parameters Type Name Description Action < CommandLineParserBuilder > configureCommands The action to add the commands. Returns Type Description ParserBuilder This ParserBuilder configured with the commands. | Improve this Doc View Source BuildParser() Creates a new instance of MGR.CommandLineParser.Parser with the default options. Declaration public IParser BuildParser() Returns Type Description IParser A new instance of MGR.CommandLineParser.Parser ."
  },
  "api/MGR.CommandLineParser.ParserOptions.html": {
    "href": "api/MGR.CommandLineParser.ParserOptions.html",
    "title": "Class ParserOptions | MGR.CommandLineParser documentation site",
    "keywords": "Class ParserOptions Defines the options for the parser. Inheritance System.Object ParserOptions Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public sealed class ParserOptions : object Constructors | Improve this Doc View Source ParserOptions() Creates a new instance of ParserOptions . Declaration public ParserOptions() Properties | Improve this Doc View Source CommandLineName Gets or sets the name of the executable to run used in the help by the parser. Declaration public string CommandLineName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Logo Gets or sets the logo used in the help by the parser. Declaration public string Logo { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source FromAssembly(Assembly) Initializes the Logo and the CommandLineName based on an assembly. Declaration public void FromAssembly(Assembly entryAssembly) Parameters Type Name Description Assembly entryAssembly The from which to extract the Logo and the CommandLineName ."
  },
  "api/MGR.CommandLineParser.ParserOptionsBuilder.html": {
    "href": "api/MGR.CommandLineParser.ParserOptionsBuilder.html",
    "title": "Class ParserOptionsBuilder | MGR.CommandLineParser documentation site",
    "keywords": "Class ParserOptionsBuilder Represents a builder for the ParserOptions . Inheritance System.Object ParserOptionsBuilder Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public class ParserOptionsBuilder : object Properties | Improve this Doc View Source CommandLineName Gets or sets the executable name. Declaration public string CommandLineName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Logo Gets ir sets the logo of the parser. Declaration public string Logo { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ForAssembly(Assembly) Initializes the Logo and the CommandLineName based on an assembly. Declaration public void ForAssembly(Assembly entryAssembly) Parameters Type Name Description Assembly entryAssembly The from which to extract the Logo and the CommandLineName ."
  },
  "api/MGR.CommandLineParser.ParsingResult.html": {
    "href": "api/MGR.CommandLineParser.ParsingResult.html",
    "title": "Class ParsingResult | MGR.CommandLineParser documentation site",
    "keywords": "Class ParsingResult Represents the result of the parsing operation. Inheritance System.Object ParsingResult Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public sealed class ParsingResult : object Properties | Improve this Doc View Source CommandObject Gets the raw command object; Declaration public ICommandObject CommandObject { get; } Property Value Type Description ICommandObject | Improve this Doc View Source IsValid Defines if the command is in a valid state (parsing and validating the options). Declaration public bool IsValid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ParsingResultCode The return code of the parsing operation. Declaration public CommandParsingResultCode ParsingResultCode { get; } Property Value Type Description CommandParsingResultCode | Improve this Doc View Source ValidationResults Gets the validation results. If there was no validation errors, the enumeration is empty. Declaration public IEnumerable<ValidationResult> ValidationResults { get; } Property Value Type Description IEnumerable < ValidationResult > Methods | Improve this Doc View Source ExecuteAsync() Executes the command. Declaration public Task<int> ExecuteAsync() Returns Type Description Task < System.Int32 > A task that represents the execution of the command. Exceptions Type Condition CommandLineParserException Thrown if the CommandObject is null or IsValid is false ."
  },
  "api/MGR.CommandLineParser.Properties.html": {
    "href": "api/MGR.CommandLineParser.Properties.html",
    "title": "Namespace MGR.CommandLineParser.Properties | MGR.CommandLineParser documentation site",
    "keywords": "Namespace MGR.CommandLineParser.Properties Classes Strings A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/MGR.CommandLineParser.Properties.Strings.html": {
    "href": "api/MGR.CommandLineParser.Properties.Strings.html",
    "title": "Class Strings | MGR.CommandLineParser documentation site",
    "keywords": "Class Strings A strongly-typed resource class, for looking up localized strings, etc. Inheritance System.Object Strings Namespace : MGR.CommandLineParser.Properties Assembly : MGR.CommandLineParser.dll Syntax public class Strings : object Properties | Improve this Doc View Source Command_HelpOption_DescriptionMessage Looks up a localized string similar to Help. Declaration public static string Command_HelpOption_DescriptionMessage { get; } Property Value Type Description System.String | Improve this Doc View Source Command_HelpOption_ShortNameMessage Looks up a localized string similar to ?. Declaration public static string Command_HelpOption_ShortNameMessage { get; } Property Value Type Description System.String | Improve this Doc View Source Console_WarningFormat Looks up a localized string similar to WARNING: {0}. Declaration public static string Console_WarningFormat { get; } Property Value Type Description System.String | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static Globalization.CultureInfo Culture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source DefaultHelpWriter_CommandTitleFormat Looks up a localized string similar to {0} Command help :. Declaration public static string DefaultHelpWriter_CommandTitleFormat { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultHelpWriter_CommandUsageFormat Looks up a localized string similar to Usage: {0} {1} {2}. Declaration public static string DefaultHelpWriter_CommandUsageFormat { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultHelpWriter_GlobalCommandLineCommandFormat Looks up a localized string similar to {0} <command>. Declaration public static string DefaultHelpWriter_GlobalCommandLineCommandFormat { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultHelpWriter_GlobalHelp_AvailableCommands Looks up a localized string similar to Available commands:. Declaration public static string DefaultHelpWriter_GlobalHelp_AvailableCommands { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultHelpWriter_GlobalHelpCommandUsageFormat Looks up a localized string similar to Type '{0} <command>' for help on a specific command.. Declaration public static string DefaultHelpWriter_GlobalHelpCommandUsageFormat { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultHelpWriter_GlobalUsageFormat Looks up a localized string similar to Usage: {0} [options] [args]. Declaration public static string DefaultHelpWriter_GlobalUsageFormat { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultHelpWriter_OptionsListTitle Looks up a localized string similar to Options:. Declaration public static string DefaultHelpWriter_OptionsListTitle { get; } Property Value Type Description System.String | Improve this Doc View Source Parser_CommandInvalidArgumentsFormat Looks up a localized string similar to Command {0} : invalid arguments :. Declaration public static string Parser_CommandInvalidArgumentsFormat { get; } Property Value Type Description System.String | Improve this Doc View Source ParserOptions_LogoFormat Looks up a localized string similar to {0} Version: {1}. Declaration public static string ParserOptions_LogoFormat { get; } Property Value Type Description System.String | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static Resources.ResourceManager ResourceManager { get; } Property Value Type Description System.Resources.ResourceManager"
  },
  "api/MGR.CommandLineParser.ServiceCollectionExtensions.html": {
    "href": "api/MGR.CommandLineParser.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class ServiceCollectionExtensions Extensions methods for the type . Inheritance System.Object ServiceCollectionExtensions Namespace : MGR.CommandLineParser Assembly : MGR.CommandLineParser.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddCommandLineParser(IServiceCollection) Adds the default services for the command line parsing. No ICommandTypeProvider are registered. Add one or more ICommandTypeProvider via the returned CommandLineParserBuilder . Declaration public static CommandLineParserBuilder AddCommandLineParser(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add the parser's services to. Returns Type Description CommandLineParserBuilder The CommandLineParserBuilder so that ICommandTypeProvider can be registered. | Improve this Doc View Source AddCommandLineParser(IServiceCollection, Action<ParserOptions>) Adds the default services for the command line parsing. No ICommandTypeProvider are registered. Add one or more ICommandTypeProvider via the returned CommandLineParserBuilder . Declaration public static CommandLineParserBuilder AddCommandLineParser(this IServiceCollection services, Action<ParserOptions> configureParserOptions) Parameters Type Name Description IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add the parser's services to. Action < ParserOptions > configureParserOptions An to configure the provided ParserOptions . Returns Type Description CommandLineParserBuilder The CommandLineParserBuilder so that ICommandTypeProvider can be registered."
  },
  "api/Microsoft.Extensions.DependencyInjection.CommandLineParserBuilder.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CommandLineParserBuilder.html",
    "title": "Class CommandLineParserBuilder | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandLineParserBuilder A class to add configuration to the command line parser. Inheritance System.Object CommandLineParserBuilder Namespace : Microsoft.Extensions.DependencyInjection Assembly : MGR.CommandLineParser.dll Syntax public sealed class CommandLineParserBuilder : object Properties | Improve this Doc View Source Services Gets the being used to configure the command line parser. Declaration public IServiceCollection Services { get; } Property Value Type Description IServiceCollection Extension Methods CommandLineParserBuilderExtensions.AddClassBasedCommands(CommandLineParserBuilder) CommandLineParserBuilderExtensions.AddCommands<TCommand>(CommandLineParserBuilder) CommandLineParserBuilderLambdaExtensions.AddCommand(CommandLineParserBuilder, String, Action<CommandBuilder>, Func<CommandExecutionContext, Task<Int32>>)"
  },
  "api/Microsoft.Extensions.DependencyInjection.CommandLineParserBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CommandLineParserBuilderExtensions.html",
    "title": "Class CommandLineParserBuilderExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandLineParserBuilderExtensions Extensions methods for the type CommandLineParserBuilder . Inheritance System.Object CommandLineParserBuilderExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : MGR.CommandLineParser.dll Syntax public static class CommandLineParserBuilderExtensions : object Methods | Improve this Doc View Source AddClassBasedCommands(CommandLineParserBuilder) Add a ICommandTypeProvider based on browsing all types in all loaded assemblies after having loaded all assemblies present on the current folder. Declaration public static CommandLineParserBuilder AddClassBasedCommands(this CommandLineParserBuilder builder) Parameters Type Name Description CommandLineParserBuilder builder The CommandLineParserBuilder to configure. Returns Type Description CommandLineParserBuilder The CommandLineParserBuilder so that additional calls can be chained. Remarks If you are running on .NET Core, do not use this method. | Improve this Doc View Source AddCommands<TCommand>(CommandLineParserBuilder) Add a ICommandTypeProvider based on browsing all types in the assembly containing the specified TCommand . Declaration public static CommandLineParserBuilder AddCommands<TCommand>(this CommandLineParserBuilder builder) where TCommand : class, ICommand Parameters Type Name Description CommandLineParserBuilder builder The CommandLineParserBuilder to configure. Returns Type Description CommandLineParserBuilder The CommandLineParserBuilder so that additional calls can be chained. Type Parameters Name Description TCommand The command type used to specify the assembly to browse."
  },
  "api/Microsoft.Extensions.DependencyInjection.CommandLineParserBuilderLambdaExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CommandLineParserBuilderLambdaExtensions.html",
    "title": "Class CommandLineParserBuilderLambdaExtensions | MGR.CommandLineParser documentation site",
    "keywords": "Class CommandLineParserBuilderLambdaExtensions Extension methods for CommandLineParserBuilder . Inheritance System.Object CommandLineParserBuilderLambdaExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : MGR.CommandLineParser.Command.Lambda.dll Syntax public static class CommandLineParserBuilderLambdaExtensions : object Methods | Improve this Doc View Source AddCommand(CommandLineParserBuilder, String, Action<CommandBuilder>, Func<CommandExecutionContext, Task<Int32>>) Add a lambda-based command. Declaration public static CommandLineParserBuilder AddCommand(this CommandLineParserBuilder builder, string commandName, Action<CommandBuilder> defineCommand, Func<CommandExecutionContext, Task<int>> executeCommand) Parameters Type Name Description CommandLineParserBuilder builder The CommandLineParserBuilder to configure. System.String commandName The name of the command. Action < CommandBuilder > defineCommand An action to define the command. Func < CommandExecutionContext , Task < System.Int32 >> executeCommand A function that represent the execution of the command. Returns Type Description CommandLineParserBuilder The CommandLineParserBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | MGR.CommandLineParser documentation site",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes CommandLineParserBuilder A class to add configuration to the command line parser. CommandLineParserBuilderExtensions Extensions methods for the type CommandLineParserBuilder . CommandLineParserBuilderLambdaExtensions Extension methods for CommandLineParserBuilder ."
  },
  "call-command-options.html": {
    "href": "call-command-options.html",
    "title": "Call command's options | MGR.CommandLineParser documentation site",
    "keywords": "Call command's options To call an option of a command, you can use the following syntaxes: --long-option-name -l when your option have defined as: [Display(ShortName = \"l\")] public YourType LongOptionName { get; set; } The short form of the option name can only be used with a single dash. Boolean options can be used combined in their short form. for example, if you have defined the following options: [Display(ShortName = \"v\")] public bool Verbose { get; set; } [Display(ShortName = \"f\")] public bool Force { get; set; } Then you can use -vf (or -fv ) to specify the value of the options Verbose and Force (the value can be specified like classics boolean options)."
  },
  "class-based/create-class-based-command.html": {
    "href": "class-based/create-class-based-command.html",
    "title": "Create a class-based command | MGR.CommandLineParser documentation site",
    "keywords": "Create a class-based command Implement ICommand To create a class-based command, you have to create a class that implements the interface MGR.CommandLineParser.Command.ICommand (or inherit CommandBase ). The interface provides two members: a property Arguments (of type IList<string> ) that will receive all arguments not mapped to an option, a method ExecuteAsync (that take no parameters and return a Task<int> ) that is called to execute the command. The returned value is the status code that should be returned as exit code. Inherit from CommandBase You can inherit from MGR.CommandLineParser.Command.CommandBase . This abstract class provides: implementation of an --help option, access to the current IServiceProvider , access to the current IConsole access to the ICommandType (which describes the current command) When deriving from this class, you have to implement the ExecuteCommandAsync that is called when the value of the --help option is false . Customize your command Learn how to customize your command . Add options to you command You can add options to your command by simply adding properties to your class. The properties can have any type, you just have to be sure there is a converter for this type (see the list of built-in converters ). You can customize the behavior of the options with some annotations (the parser supports the annotations from System.ComponentModel.DataAnnotations ): Use System.ComponentModel.DataAnnotations.DisplayAttribute and some of its properties: Name and ShortName to respectively change the long and short form of the option Description to define a description in the auto-generated help for the option, Use any of the System.ComponentModel.DataAnnotations.ValidationAttribute derived class to validate the value provided for the option. See all details about customizing your options ."
  },
  "class-based/customize-class-based-command.html": {
    "href": "class-based/customize-class-based-command.html",
    "title": "Customize your class-based command | MGR.CommandLineParser documentation site",
    "keywords": "Customize your class-based command Add attribute CommandAttribute The first way to customize your command is to add the attribute MGR.CommandLineParser.Command.CommandAttribute to your class. This attribute allows you to define: the description of the command (displayed in the help) ( Description property) the global usage of the command (displayed in the help) ( Usage property). This is used to display how to use your command, and is the specific part for your command: the name of the executable and the name of the command should not be included! some samples for the command (displayed in the help) ( Samples property) if the command should be hide from the listing of commands in the help ( HideFromHelpListing ). This can be useul for preview command because even if the command is not listed, it can be invoked!"
  },
  "class-based/customize-class-based-option.html": {
    "href": "class-based/customize-class-based-option.html",
    "title": "Customize your class-based option | MGR.CommandLineParser documentation site",
    "keywords": "Customize your class-based option Implement ICommand You can add options to your command by simply adding properties to your class. The properties can have any type, you just have to be sure there is a converter for this type (see the list of built-in converters ). You can customize the behavior of the options with some annotations (the parser supports the annotations from System.ComponentModel.DataAnnotations ): Use System.ComponentModel.DataAnnotations.DisplayAttribute and some of its properties: Name and ShortName to respectively change the long and short form of the option Description to define a description in the auto-generated help for the option, Use any of the System.ComponentModel.DataAnnotations.ValidationAttribute derived class to validate the value provided for the option."
  },
  "customize-command-display.html": {
    "href": "customize-command-display.html",
    "title": "Customize command display | MGR.CommandLineParser documentation site",
    "keywords": "Customize command display Command display You can customize some command display attributes in the help with the MGR.CommandLineParser.Command.CommandAttribute . You can add a Description , Usage and some Samples . You can set HideFromHelpListing to hide a command the help listing. Option display You can customize the display of the option's command by two ways: Using the System.ComponentModel.DataAnnotations.DisplayAttribute and it's Name , ShortName and Description properties. Registrying an implementation of MGR.CommandLineParser.Extensibility.Command.IPropertyOptionAlternateNameGenerator ."
  },
  "customize-internal-of-parser.html": {
    "href": "customize-internal-of-parser.html",
    "title": "Customize the internal of the parser | MGR.CommandLineParser documentation site",
    "keywords": "Customize the internal of the parser Some internal parts of the parser can be customized: the converters for the options, the discovery and the activation of the commands, the generation the help, the \" console \" and the generation of alternate names for the options. The library uses the dependency injection system provided by Microsoft.Extensions.DependencyInjection . By default, the library will configure all the services with default implementations when creating the parser by calling BuildParser() on a ParserBuilder instance. In this case, the IServiceProvider that will be used by the parser will have its own scope. If you want to customize some services, you have to provide your own ServiceProvider when building the parser (by calling the overload BuildParser(IServiceProvider) ). Your IServiceProvider have to be configured with the services needed by the parser. This can be done by calling the extension method AddCommandLineParser on the IServiceCollection that will create the IServiceProvider ."
  },
  "extensibility/built-in-converters.html": {
    "href": "extensibility/built-in-converters.html",
    "title": "Built-in converters | MGR.CommandLineParser documentation site",
    "keywords": "Built-in converters The following converters are built-into the parser library (they are all in the namespace MGR.CommandLineParser.Extensibility.Converters ): Converter type Target type(s) BooleanConverter bool ByteConverter byte CharConverter char DateTimeConverter DateTime DecimalConverter decimal DoubleConverter doube EnumConverter An enum FileSystemInfoConverter FileInfo or a DirectoryInfo GuidConverter Guid Int16Converter short Int32Converter int Int64Converter long SingleConverter float StringConverter string TimeSpanConverter TimeSpan UriConverter Uri KeyValueConverter KeyValuePair<T,V> (this converter is used when the type of the option is a dictionary) ."
  },
  "extensibility/console.html": {
    "href": "extensibility/console.html",
    "title": "Displaying info to the user: IConsole | MGR.CommandLineParser documentation site",
    "keywords": "Displaying info to the user: IConsole In order to ease the testability of your commands, writing information to the users can be done though the IConsole interface. This interface is also used by the parser itself to display info to the user (for example the help). The internal logs are not written to the console. As for others interface, you can provide your own implementation for example if you want to use the library in an other type of GUI (like WPF or Web App)."
  },
  "extensibility/converter.html": {
    "href": "extensibility/converter.html",
    "title": "Converters | MGR.CommandLineParser documentation site",
    "keywords": "Converters Converters is the mechanism to convert the arguments provided as string to the strongly type expected by your option. There is multiple built-in converters , but you can create your own if you don't find the one you need. Converter are implementation of the interface MGR.CommandLineParser.Extensibility.Converters.IConverter . That interface defines the following: a property TargetType that let the parser knows for which type the converter is for, a method Convert that take the provided string and the type of the option for which the value is provided for. The method returns an object that can be set to the option. To add your own converter, you have to register it in the DI container used by the library. If you want to replace one of the built-in converter, you have to manually remove the built-in converter from the DI container."
  },
  "index.html": {
    "href": "index.html",
    "title": "MGR.CommandLineParser documentation | MGR.CommandLineParser documentation site",
    "keywords": "MGR.CommandLineParser documentation MGR.CommandLineParser is a multi-command line parser library. It provides an extensible mechanism to provide define commands (with multiple out-of-the-box providers) and is able to automatically generate help/usage output for all commands. Built-in providers lets you define command by: creating a class that implements MGR.CommandLineParser.Command.ICommand or inherits MGR.CommandLineParser.Command.CommandBase (provides some basic behavior for commands like support of --help option) dynamically defining a command that uses a lambda as execution (via the package `MGR.CommandLineParser.Command.Lambda) The general syntax on the command line is: <commandName> <options> <arguments> Options can be specified by their normal/long form ( --full-option ) or with its short form ( -fo ). The value of the option can be separated of the name of the option by a space ( ) or a colon ( : ). Arguments is a list of non-option string that is passed to the command. There is also some ways to customize others parts of the parser: how to display information to the user: the IConsole interface how the value of the options are converted: the IConverter interface This library use dependency injection to retrieve the implementation of all this service, so you just have to register your own implementation to override/augment the default behavior. Customize command display Call command's options Customize the internal of the parser"
  },
  "lambda/create-a-lambda-based-command.html": {
    "href": "lambda/create-a-lambda-based-command.html",
    "title": "Command based on a lambda | MGR.CommandLineParser documentation site",
    "keywords": "Command based on a lambda If you need to define command with some dynamism, you can define command that are based on a lambda for its execution. To define the command, you have to call the extension method AddCommand on the CommandLineParserBuilder . The method expects: the name of the command an Action<CommandBuilder> to define the options of the command (and other parameters of the command) a Func<CommandExecutionContext, Task<int>> that holds the execution of the command. The CommandExecutionContext is the parameter that allows you to get the value of the different options."
  },
  "syntax/index.html": {
    "href": "syntax/index.html",
    "title": "Syntax accepted by the parser | MGR.CommandLineParser documentation site",
    "keywords": "Syntax accepted by the parser"
  }
}